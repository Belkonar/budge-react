import { app, BrowserWindow, ipcMain, Menu } from 'electron';
import { setupIpc } from './backend/data-api';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// declare const SPLASH_WINDOW_WEBPACK_ENTRY: string;
// declare const SPLASH_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// process.hrtime.bigint();
// const inter: BudgeInterval = {
//   start: parseISO('2023-10-01'),
//   end: parseISO('2024-10-31'),
// }

// function getWeekly(interval: BudgeInterval, day: Day, skip: number = 1): Date[] {
//   const dates: Date[] = [];

//   let current = interval.start;
//   if (getDay(interval.start) !== day) {
//     current = nextDay(interval.start, day);
//   }

//   for (let date = current; date < interval.end; date = addDays(date, 7 * skip)) {
//     dates.push(date);
//   }

//   return dates;
// }

// function getWeeklySet(interval: BudgeInterval, days: Day[], skip: number = 1): Date[] {
//   return days.flatMap(day => getWeekly(interval, day, skip));
// }


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const devMode: boolean = process.env.NODE_ENV === 'development';

let mainWindow: BrowserWindow | null = null;
let splashWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  setupIpc(ipcMain);

  ipcMain.handle('ready', () => {
    if (splashWindow === null || mainWindow === null) {
      return;
    }
    if (splashWindow) {
      splashWindow.close();
      splashWindow = null;
    }
    if (mainWindow) {
      mainWindow.show();
    }
  })

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 900,
    width: 1300,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    title: 'Budge',
    autoHideMenuBar: true,
    show: false,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const createSplash = (): void => {
  splashWindow = new BrowserWindow({
    height: 150,
    width: 300,
    title: 'Budge',
    autoHideMenuBar: true,
  });

  splashWindow.loadFile('./src/splash.html');
}

if (!devMode) {
  Menu.setApplicationMenu(null);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);
app.on('ready', createSplash);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
